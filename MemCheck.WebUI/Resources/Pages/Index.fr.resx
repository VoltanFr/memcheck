<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CardsOfYourMultipleDecks" xml:space="preserve">
    <value>cartes de vos</value>
  </data>
  <data name="CardsOfYourSingleDeck" xml:space="preserve">
    <value>cartes de votre paquet</value>
  </data>
  <data name="DataTime" xml:space="preserve">
    <value>Heure de ces informations</value>
  </data>
  <data name="Deck" xml:space="preserve">
    <value>paquet</value>
  </data>
  <data name="Decks" xml:space="preserve">
    <value>paquets</value>
  </data>
  <data name="ExpiredCard" xml:space="preserve">
    <value>carte expirée</value>
  </data>
  <data name="ExpiredCards" xml:space="preserve">
    <value>cartes expirées</value>
  </data>
  <data name="IfYouDontHaveAnAccount" xml:space="preserve">
    <value>si vous n'en avez pas</value>
  </data>
  <data name="InTheDeck" xml:space="preserve">
    <value>Dans le paquet</value>
  </data>
  <data name="LogIn" xml:space="preserve">
    <value>vous connecter</value>
  </data>
  <data name="NoUnkownOrExpiredCardAmongThe" xml:space="preserve">
    <value>Aucune carte non apprise ou expirée parmi les</value>
  </data>
  <data name="PageTitle" xml:space="preserve">
    <value>Accueil</value>
  </data>
  <data name="PerfectMemory" xml:space="preserve">
    <value>Hé, mémoire parfaite ?</value>
  </data>
  <data name="Register" xml:space="preserve">
    <value>créez un compte</value>
  </data>
  <data name="TheDecksPage" xml:space="preserve">
    <value>la page dédiée</value>
  </data>
  <data name="TheDoc" xml:space="preserve">
    <value>la doc</value>
  </data>
  <data name="ToUseMemCheck" xml:space="preserve">
    <value>pour utiliser Mnesios</value>
  </data>
  <data name="UnknownCard" xml:space="preserve">
    <value>carte non apprise</value>
  </data>
  <data name="UnknownCards" xml:space="preserve">
    <value>cartes non apprises</value>
  </data>
  <data name="Welcome" xml:space="preserve">
    <value>Bienvenue</value>
  </data>
  <data name="YouCanCreateOneOn" xml:space="preserve">
    <value>Vous pouvez en créer un sur</value>
  </data>
  <data name="YouDontHaveADeckYet" xml:space="preserve">
    <value>Vous n'avez pas encore de paquet</value>
  </data>
  <data name="YouHave" xml:space="preserve">
    <value>Vous avez</value>
  </data>
  <data name="YouHaveIn" xml:space="preserve">
    <value>Vous avez dans</value>
  </data>
  <data name="YouMayAlsoWantToRead" xml:space="preserve">
    <value>Vous pouvez aussi lire</value>
  </data>
  <data name="YouNeedTo" xml:space="preserve">
    <value>Vous devez</value>
  </data>
  <data name="YourDeck" xml:space="preserve">
    <value>votre paquet</value>
  </data>
  <data name="PleaseWaitForMount" xml:space="preserve">
    <value>Chargement des données...</value>
  </data>
  <data name="NextExpiry" xml:space="preserve">
    <value>Prochaine expiration :</value>
  </data>
  <data name="No" xml:space="preserve">
    <value>Aucune</value>
  </data>
  <data name="CreatingSome" xml:space="preserve">
    <value>en créant</value>
  </data>
  <data name="OrBy" xml:space="preserve">
    <value>ou en</value>
  </data>
  <data name="ThereIsNoCardIn" xml:space="preserve">
    <value>Il n'y a aucune carte dans</value>
  </data>
  <data name="TheSearchPage" xml:space="preserve">
    <value>la page de recherche</value>
  </data>
  <data name="YourDecks" xml:space="preserve">
    <value>vos paquets</value>
  </data>
  <data name="YouShouldAddCardsEitherFrom" xml:space="preserve">
    <value>Vous pouvez ajouter des cartes depuis</value>
  </data>
  <data name="OnThe" xml:space="preserve">
    <value>Sur la</value>
  </data>
  <data name="TagListPage" xml:space="preserve">
    <value>page des labels</value>
  </data>
  <data name="UseTheDemoButtonOnTheLabelOfYourChoice" xml:space="preserve">
    <value>vous pouvez utiliser le bouton Démo (👁) sur le label de votre choix - conseil : choisissez un label qui a une évaluation moyenne élevée</value>
  </data>
  <data name="WantADemo" xml:space="preserve">
    <value>Vous voulez un apperçu de Mnesios ?</value>
  </data>
</root>
