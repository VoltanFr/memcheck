<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AdditionalInfo" xml:space="preserve">
    <value>AdditionaI info</value>
  </data>
  <data name="AdditionalInfoImages" xml:space="preserve">
    <value>Additional info images</value>
  </data>
  <data name="And" xml:space="preserve">
    <value>and</value>
  </data>
  <data name="AppearsInDecksOf" xml:space="preserve">
    <value>Appears in the decks of</value>
  </data>
  <data name="BackSide" xml:space="preserve">
    <value>Back Side</value>
  </data>
  <data name="BackSideImages" xml:space="preserve">
    <value>Back images</value>
  </data>
  <data name="CanNotUpdateBecauseNoDifference" xml:space="preserve">
    <value>Can not update the card because you did not change anything.</value>
  </data>
  <data name="Cards" xml:space="preserve">
    <value>cards</value>
  </data>
  <data name="CardSavedOk" xml:space="preserve">
    <value>Card saved successfully.</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Description:</value>
  </data>
  <data name="Empty" xml:space="preserve">
    <value>(empty)</value>
  </data>
  <data name="Failure" xml:space="preserve">
    <value>Failure</value>
  </data>
  <data name="FrontSide" xml:space="preserve">
    <value>Front Side</value>
  </data>
  <data name="FrontSideImages" xml:space="preserve">
    <value>Front images</value>
  </data>
  <data name="HeCreatedAVersionOfThisCard" xml:space="preserve">
    <value>he created a version of this card</value>
  </data>
  <data name="HeHasThisCardInADeck" xml:space="preserve">
    <value>he has this card in a deck.</value>
  </data>
  <data name="ImageAlreadyInCard" xml:space="preserve">
    <value>Image already in the card (you can't use the same image twice)</value>
  </data>
  <data name="ImageName" xml:space="preserve">
    <value>Image name:</value>
  </data>
  <data name="ImageNotFound" xml:space="preserve">
    <value>Image not found:</value>
  </data>
  <data name="ImageUploader" xml:space="preserve">
    <value>Uploaded by:</value>
  </data>
  <data name="InitialCardVersionCreation" xml:space="preserve">
    <value>Initial version</value>
  </data>
  <data name="InvalidAdditionalInfoLength" xml:space="preserve">
    <value>Invalid additional information length:</value>
  </data>
  <data name="InvalidBackSideLength" xml:space="preserve">
    <value>Invalid back side length:</value>
  </data>
  <data name="InvalidCardEmptyBackSide" xml:space="preserve">
    <value>Back side can not be empty.</value>
  </data>
  <data name="InvalidCardEmptyFrontSide" xml:space="preserve">
    <value>Front side can not be empty</value>
  </data>
  <data name="InvalidCardEmptyVersionDescription" xml:space="preserve">
    <value>Version description can not be empty</value>
  </data>
  <data name="InvalidFrontSideLength" xml:space="preserve">
    <value>Invalid front side length:</value>
  </data>
  <data name="InvalidReferencesLength" xml:space="preserve">
    <value>Invalid references length:</value>
  </data>
  <data name="InvalidVersionDescriptionLength" xml:space="preserve">
    <value>Invalid version description length:</value>
  </data>
  <data name="LanguageName" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="LastVersion" xml:space="preserve">
    <value>Last version:</value>
  </data>
  <data name="LooksLikeABug" xml:space="preserve">
    <value>Ooops! Looks like there was a bug.</value>
  </data>
  <data name="MustBeBetween" xml:space="preserve">
    <value>, must be between</value>
  </data>
  <data name="MustHaveVisibilityBecause" xml:space="preserve">
    <value>must have visibility since</value>
  </data>
  <data name="NoneFeminine" xml:space="preserve">
    <value>none</value>
  </data>
  <data name="NoneMasculine" xml:space="preserve">
    <value>none</value>
  </data>
  <data name="NotIncludedInAnyDeck" xml:space="preserve">
    <value>Not used by any deck.</value>
  </data>
  <data name="PersoTagAllowedOnlyOnPrivateCards" xml:space="preserve">
    <value>Tag 'Perso' is allowed only on private cards.</value>
  </data>
  <data name="PleaseEnterAnImageName" xml:space="preserve">
    <value>Please enter an image name</value>
  </data>
  <data name="Public" xml:space="preserve">
    <value>public</value>
  </data>
  <data name="RatingSavedOk" xml:space="preserve">
    <value>Rating saved successfully:</value>
  </data>
  <data name="References" xml:space="preserve">
    <value>References</value>
  </data>
  <data name="RequestStatus" xml:space="preserve">
    <value>Request status</value>
  </data>
  <data name="SelectedVersion" xml:space="preserve">
    <value>Selected version:</value>
  </data>
  <data name="Size" xml:space="preserve">
    <value>Size:</value>
  </data>
  <data name="Source" xml:space="preserve">
    <value>Source:</value>
  </data>
  <data name="Success" xml:space="preserve">
    <value>Success</value>
  </data>
  <data name="SureCreateWithoutTag" xml:space="preserve">
    <value>Save without tag?</value>
  </data>
  <data name="Tag" xml:space="preserve">
    <value>Tag</value>
  </data>
  <data name="Tags" xml:space="preserve">
    <value>Tags</value>
  </data>
  <data name="UnknownCard" xml:space="preserve">
    <value>Unknown card</value>
  </data>
  <data name="UsedIn" xml:space="preserve">
    <value>Used in</value>
  </data>
  <data name="User" xml:space="preserve">
    <value>User</value>
  </data>
  <data name="UsersWithView" xml:space="preserve">
    <value>Visibility</value>
  </data>
  <data name="Visibility" xml:space="preserve">
    <value>Visibility</value>
  </data>
</root>