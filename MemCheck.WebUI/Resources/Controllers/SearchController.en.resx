<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddedToDeckOn" xml:space="preserve">
    <value>Added to deck on</value>
  </data>
  <data name="AddTag" xml:space="preserve">
    <value>Add tag</value>
  </data>
  <data name="After" xml:space="preserve">
    <value>After</value>
  </data>
  <data name="AlertAddCardsToDeckPart1" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="AlertAddCardsToDeckPart2" xml:space="preserve">
    <value>cards to deck</value>
  </data>
  <data name="AlertAddCardsToDeckPart3" xml:space="preserve">
    <value>selected cards are already in the deck</value>
  </data>
  <data name="AlertAddCardToDeckPart1" xml:space="preserve">
    <value>Add one card to deck</value>
  </data>
  <data name="AlertAddCardToDeckPart3" xml:space="preserve">
    <value>one selected card is already in the deck</value>
  </data>
  <data name="AlertAddOneCardToDeck" xml:space="preserve">
    <value>Add the selected card to deck</value>
  </data>
  <data name="AlertAddTagToCardsPart1" xml:space="preserve">
    <value>Sure you want to add the tag</value>
  </data>
  <data name="AlertAddTagToCardsPart2" xml:space="preserve">
    <value>to</value>
  </data>
  <data name="AlertAddTagToCardsPart3Plural" xml:space="preserve">
    <value>cards?</value>
  </data>
  <data name="AlertAddTagToCardsPart3Single" xml:space="preserve">
    <value>card?</value>
  </data>
  <data name="AlertDeleteCardsPart1" xml:space="preserve">
    <value>WARNING: you are about to DELETE</value>
  </data>
  <data name="AlertDeleteCardsPart2Plural" xml:space="preserve">
    <value>cards from Mnesios. No user will be able to access them.</value>
  </data>
  <data name="AlertDeleteCardsPart2Single" xml:space="preserve">
    <value>a card from Mnesios. No user will be able to access it.</value>
  </data>
  <data name="AlertMoveCardsToHeapPart1" xml:space="preserve">
    <value>Move</value>
  </data>
  <data name="AlertMoveCardsToHeapPart2" xml:space="preserve">
    <value>to heap</value>
  </data>
  <data name="AlertMoveCardsToHeapPart3" xml:space="preserve">
    <value>cards are already in the target heap</value>
  </data>
  <data name="AlertMoveCardToHeapPart3" xml:space="preserve">
    <value>one card is already in the target heap</value>
  </data>
  <data name="AlertMoveOneCardToHeap" xml:space="preserve">
    <value>Move a selected card to heap</value>
  </data>
  <data name="AlertRemoveCardFromDeckPart1" xml:space="preserve">
    <value>Remove one card from deck</value>
  </data>
  <data name="AlertRemoveCardFromDeckPart3" xml:space="preserve">
    <value>one selected card is not in the deck</value>
  </data>
  <data name="AlertRemoveCardsFromDeckPart1" xml:space="preserve">
    <value>Remove</value>
  </data>
  <data name="AlertRemoveCardsFromDeckPart2" xml:space="preserve">
    <value>cards from deck</value>
  </data>
  <data name="AlertRemoveCardsFromDeckPart3" xml:space="preserve">
    <value>cards are not in the deck</value>
  </data>
  <data name="AlertRemoveOneCardFromDeck" xml:space="preserve">
    <value>Remove one card from deck</value>
  </data>
  <data name="All" xml:space="preserve">
    <value>&lt;All&gt;</value>
  </data>
  <data name="AllUsers" xml:space="preserve">
    <value>all users</value>
  </data>
  <data name="Any" xml:space="preserve">
    <value>&lt;Any&gt;</value>
  </data>
  <data name="Before" xml:space="preserve">
    <value>Before</value>
  </data>
  <data name="BiggestHeapReached" xml:space="preserve">
    <value>Biggest heap reached in this deck:</value>
  </data>
  <data name="CanNotSubscribeToSearchInDeck" xml:space="preserve">
    <value>Subscribing to a search in a deck is not supported</value>
  </data>
  <data name="CanNotSubscribeToSearchWithRatingCriteria" xml:space="preserve">
    <value>Subscribing to a search with rating criteria is not supported</value>
  </data>
  <data name="CanNotSubscribeToSearchWithVisibilityCriteria" xml:space="preserve">
    <value>Subscribing to a search with visibility criteria is not supported</value>
  </data>
  <data name="CantAddToDeckBecauseSomeCardsAlreadyIn" xml:space="preserve">
    <value>At least one card is in your deck</value>
  </data>
  <data name="CardAdded" xml:space="preserve">
    <value>Card added</value>
  </data>
  <data name="CardAlreadyInDeck" xml:space="preserve">
    <value>The selected card is already in the deck</value>
  </data>
  <data name="CardAlreadyInTargetHeap" xml:space="preserve">
    <value>The selected card is already in the target heap</value>
  </data>
  <data name="CardAlreadyNotInDeck" xml:space="preserve">
    <value>The selected card is not in the deck</value>
  </data>
  <data name="CardDeleted" xml:space="preserve">
    <value>Card deleted</value>
  </data>
  <data name="CardMoved" xml:space="preserve">
    <value>Card moved</value>
  </data>
  <data name="CardRemoved" xml:space="preserve">
    <value>Card removed</value>
  </data>
  <data name="CardsAdded" xml:space="preserve">
    <value>Cards added</value>
  </data>
  <data name="CardsAlreadyInDeck" xml:space="preserve">
    <value>All the selected cards are already in the deck</value>
  </data>
  <data name="CardsAlreadyInTargetHeap" xml:space="preserve">
    <value>The selected cards are already in the target heap</value>
  </data>
  <data name="CardsAlreadyNotInDeck" xml:space="preserve">
    <value>The selected cards are not in the deck</value>
  </data>
  <data name="CardsDeleted" xml:space="preserve">
    <value>Cards deleted</value>
  </data>
  <data name="CardsMoved" xml:space="preserve">
    <value>Cards moved</value>
  </data>
  <data name="CardsNotRegisteredForNotif" xml:space="preserve">
    <value>Cards you did not subscribe to</value>
  </data>
  <data name="CardsRegisteredForNotif" xml:space="preserve">
    <value>Cards you subscribed to</value>
  </data>
  <data name="CardsRemoved" xml:space="preserve">
    <value>Cards removed</value>
  </data>
  <data name="CardsWithoutTags" xml:space="preserve">
    <value>&lt;Cards without tag&gt;</value>
  </data>
  <data name="CardVisibleToMoreThanOwner" xml:space="preserve">
    <value>Visible to more than their owner</value>
  </data>
  <data name="CardVisibleToOwnerOnly" xml:space="preserve">
    <value>Visible to owner only (private)</value>
  </data>
  <data name="ConfirmSubscription" xml:space="preserve">
    <value>Sure you want to subscribe to this search? You will be notified by email when the result changes (according to your user settings).</value>
  </data>
  <data name="Deck" xml:space="preserve">
    <value>Deck</value>
  </data>
  <data name="Deletion" xml:space="preserve">
    <value>Deletion</value>
  </data>
  <data name="ExcludeCards" xml:space="preserve">
    <value>Exclude cards</value>
  </data>
  <data name="ExpiredOn" xml:space="preserve">
    <value>Expired on</value>
  </data>
  <data name="Heap" xml:space="preserve">
    <value>Heap:</value>
  </data>
  <data name="Ignore" xml:space="preserve">
    <value>Ignore</value>
  </data>
  <data name="IncludeCards" xml:space="preserve">
    <value>Include cards</value>
  </data>
  <data name="InNoneOfYourDecks" xml:space="preserve">
    <value>This card is in none of your decks</value>
  </data>
  <data name="InYourDeck" xml:space="preserve">
    <value>This card is in your deck</value>
  </data>
  <data name="InYourDecks" xml:space="preserve">
    <value>This card is in your decks</value>
  </data>
  <data name="LastLearnedOn" xml:space="preserve">
    <value>Last learned on</value>
  </data>
  <data name="NbTimesInNotLearnedHeap" xml:space="preserve">
    <value>Times in not learned heap:</value>
  </data>
  <data name="Never" xml:space="preserve">
    <value>Never</value>
  </data>
  <data name="NoName" xml:space="preserve">
    <value>Not named</value>
  </data>
  <data name="None" xml:space="preserve">
    <value>&lt;None&gt;</value>
  </data>
  <data name="NoRating" xml:space="preserve">
    <value>No rating at all</value>
  </data>
  <data name="NotAllowedToModifyAllTheseCards" xml:space="preserve">
    <value>You are not allowed to modify all these cards (you need to be owner)</value>
  </data>
  <data name="NotInYourDeck" xml:space="preserve">
    <value>This card is not in your deck</value>
  </data>
  <data name="On" xml:space="preserve">
    <value>On</value>
  </data>
  <data name="OneUserHasCardWithFrontSide" xml:space="preserve">
    <value>One other user has in a deck the card with front side</value>
  </data>
  <data name="OperationIsForFilteringOnDeckInclusive" xml:space="preserve">
    <value>This operation requires filtering and including a single deck</value>
  </data>
  <data name="OperationIsForSelectedCards" xml:space="preserve">
    <value>This applies to selected cards</value>
  </data>
  <data name="PersoTagAllowedOnlyOnPrivateCards" xml:space="preserve">
    <value>Tag 'Perso' is allowed only on private cards.</value>
  </data>
  <data name="Registered" xml:space="preserve">
    <value>Registered</value>
  </data>
  <data name="SearchTooBigForRatingFiltering" xml:space="preserve">
    <value>The set of results is too big to filter on evaluations. You need to refine your selection.</value>
  </data>
  <data name="SelectedRatingAndAbove" xml:space="preserve">
    <value>At least</value>
  </data>
  <data name="SelectedRatingAndBelow" xml:space="preserve">
    <value>At most</value>
  </data>
  <data name="StartingWith" xml:space="preserve">
    <value>starting with</value>
  </data>
  <data name="SubscriptionRecorded" xml:space="preserve">
    <value>Subscription recorded</value>
  </data>
  <data name="Success" xml:space="preserve">
    <value>Success</value>
  </data>
  <data name="TagAdded" xml:space="preserve">
    <value>Tag added</value>
  </data>
  <data name="TooManySelectedCards" xml:space="preserve">
    <value>Too many selected cards (max: 50)</value>
  </data>
  <data name="UnknownCardsHeap" xml:space="preserve">
    <value>Unknown cards</value>
  </data>
  <data name="Unregistered" xml:space="preserve">
    <value>Unregistered</value>
  </data>
  <data name="UsersHaveCardWithFrontSide" xml:space="preserve">
    <value>other users have in a deck the card with front side</value>
  </data>
  <data name="Visibility" xml:space="preserve">
    <value>Visibility:</value>
  </data>
  <data name="WillExpireOn" xml:space="preserve">
    <value>Will expire:</value>
  </data>
  <data name="YouAreNotTheCreatorOfAllPreviousVersions" xml:space="preserve">
    <value>You are not the creator of all the previous versions of the card with front side</value>
  </data>
  <data name="YouAreNotTheCreatorOfCurrentVersion" xml:space="preserve">
    <value>You are not the creator of the current version of the card with front side</value>
  </data>
  <data name="YouOnly" xml:space="preserve">
    <value>you only</value>
  </data>
</root>
